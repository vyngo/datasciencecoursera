qplot(carat, price, data = diamonds)
qplot(carat, price, data = diamonds, shape=cut)
qplot(carat, price, data = diamonds, color=cut)
qplot(carat, price, data = diamonds, color=cut, geom_smooth(method="lm"))
qplot(carat, price, data = diamonds, color=cut, geom_smooth("lm"))
qplot(carat, price, data = diamonds, color=cut)
qplot(carat, price, data = diamonds, color=cut) + geom_smooth(method="lm")
qplot(carat, price, data = diamonds, color=cut, facets = . ~ cut) + geom_smooth(method="lm")
g <- ggplot(diamonds, aes(depth, price))
summary(g)
g + geom_point(alpha=1/3)
cutpoints <- quantile(diamonds$carat, seq(0,1,len=4), na.rm=TRUE)
cutpoints
diamonds$car2 <- cut(diamonds$carat, cutpoints)
g <- ggplot(diamonds, aes(depth, price))
g + geom_point(alpha=1/3) + facet_grid(cut ~ car2)
myd
diamonds[myd,]
g + geom_point(alpha=1/3) + facet_grid(cut ~ car2) + geom_smooth(method="lm", size=3, color="pink")
ggplot(diamonds, aes(carat, price)) + geom_boxplot() + facet_grid(. ~ cut)
swirl()
swirl()
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
library(ggplot2movies)
g <- ggplot(movies, aes(votes, rating))
print(g)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(swirl)
swirl()
dist(dataFrame)
hc <- hclust(distxy)
plot(hc)
plot(as.dendrogram(hc))
abline(h=1.5, col = "blue")
abline(h=0.4, col = "blue")
abline(h=0.4, col = "red")
5
12
abline(h=0.05, col = "green")
dFsm
dist(dFsm)
hc
heatmap(dataMatrix, col=cm.colors(25))
heatmap(mt)
mt
plot(denmt)
distmt
cmat
points(cx,cy, col=c("red", "orange", "purple"), pch=3, cex=2, lwd=2)
mdist(x,y, cx,cy)
apply(distTmp, 2, which.min)
points(x, y, pch=19, cex=2, col=cols1[newClust])
tapply(x, newClust, mean)
tapply(y, newClust, mean)
points(newCx, newC, col=cols1, pch=8, cex=2, lwd=2)
points(newCx, newCy, col=cols1, pch=8, cex=2, lwd=2)
mdist(x,y, newCx,newCy)
apply(distTmp2, 2, which.min)
points(x, y, pch=19, cex=2, col=cols1[newClust2])
tapply(x, newClust2, mean)
tapply(y, newClust2, mean)
points(finalCx, finalCy, col=cols1, pch=9, cex=2, lwd=2)
kmeans(dataFrame, 3)
kmObj$iter
plot(x,y,col=kmObj$cluster, pch=19, cex=2)
points(kmObj$centers, col=c("black", "red", "green"))
points(kmObj$centers, col=c("black", "red", "green"), pch=3, cex=3, lwd=3)
plot(x,y,col=kmeans(dataFrame, 6)$cluster, pch=19, cex=2)
points(kmObj$centers, col=c("black", "red", "green"), pch=3, cex=3, lwd=3)
plot(x,y,col=kmeans(dataFrame, 6)$cluster, pch=19, cex=2)
plot(x,y,col=kmeans(dataFrame, 6)$cluster, pch=19, cex=2)
swirl()
swirl()
swirl()
swirl()
library(swirl)
swirl()
library(swirl)
swirl()
x
y
length(x)
length(y)
length(x) == length(y)
xy.coords(x, y, xlabel, ylabel, log)
swirl()
install_from_swirl("Exploratory Data Analysis")
library(swirl)
swirl()
remove.packages("swirl")
swirl()
install.packages("swirl")
library("swirl")
swirl()
cmat
points(cx,cy, col=c("red", "orange", "purple"), pch=3, cex=2, lwd=2)
mdist(x,y, cx,cy)
apply(distTmp, 2, which.min)
points(x, y, pch=19, cex=2, col=cols1[newClust])
tapply(x, newClust, mean)
tapply(y, newClust, mean)
points(newCx, newC, col=cols1, pch=8, cex=2, lwd=2)
points(newCx, newCy, col=cols1, pch=8, cex=2, lwd=2)
mdist(x,y, newCx,newCy)
apply(distTmp2, 2, which.min)
points(x, y, pch=19, cex=2, col=cols1[newClust2])
tapply(x, newClust2, mean)
tapply(y, newClust2, mean)
points(finalCx, finalCy, col=cols1, pch=9, cex=2, lwd=2)
kmeans(dataFrame, 3)
kmObj$iter
plot(x,y,col=kmObj$cluster, pch=19, cex=2)
points(kmObj$centers, col=c("black", "red", "green"))
points(kmObj$centers, col=c("black", "red", "green"), pch=3, cex=3, lwd=3)
points(kmObj$centers, col=c("black", "red", "green"), pch=3, cex=3, lwd=3)
plot(x,y,col=kmeans(dataFrame, 6)$cluster, pch=19, cex=2)
plot(x,y,col=kmeans(dataFrame, 6)$cluster, pch=19, cex=2)
plot(x,y,col=kmeans(dataFrame, 6)$cluster, pch=19, cex=2)
head(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.R")
source("addPatt.R", local=TRUE)
heatmap(dataMatrix)
mat
svd(mat)
matu %*% diag %*% t(matv)
svd(scale(mat))
prcomp(mat)
prcomp(scale(mat))
svd1[, 1]
svd1$v[, 1]
svd1$d
head(constantMatrix)
svd2$d
svd2$v[,2]
svd2$v[,1:2]
svd2$d
dim(faceData)
a1 <- (svd1$u[,1] * svd1$d[1])
a1 <- (svd1$u[,1] * svd1$d[1]) %*% t(svd1$v[,1])
image(a1)
myImage(a1)
a2 <- (sdv1$u[, 1:2] * svd1$d[,1:2]) %*% svd1$v
a2 <- (sdv1$u[, 1:2] * svd1$d[,1:2]) %*% sdv1$v[,1:2]
a2 <- (svd1$u[, 1:2] * svd1$d[,1:2]) %*% svd1$v[,1:2]
a2 <- (svd1$u * svd1$d) %*% svd1$v
a2 <- svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
myImage(a2)
a2 <- myImage(2,3)
a2 <- myImage(2)
a2 < 1
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]))
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]))
myImage(svd1$u[,1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[,1:10]))
swirl()
swirl()
library(swirl)
swirl(0)
dim(ssd)
names(ssd[,562:563])
table(ssd$subject)
sum(table(ssd$subject))
table(ssd$activity)
sub1 <- subset(ssd, subject == 1)
dim(sub1)
names(sub1[, 1:12])
myedit("showXY.R")
showMe(1:6)
mdist <- dist(sub1[,1:3])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col=unclass(sub1$activity))
mdist <- dist(sub1[, 10:12])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col=unclass(sub1$activity))
sdv1 <-  svd(sclae(sub1[,-c(562,563)]))s
sdv1 <-  svd(sclae(sub1[,-c(562,563)]))
sdv1 <-  svd(scale(sub1[,-c(562,563)]))
svd1 <-  svd(scale(sub1[,-c(562,563)]))
dim(sdv1$u)
dim(svd1$u)
macCon <- which.max(svd1$v)
macCon <- which.max(svd1$v[,1])
macCon <- which.max(svd1$v[,2])
maxCon <- which.max(svd1$v[,2])
mdist <- dist(sub1[, c(10,11,12, maxCon)])
dist(sub1[,c(10:12,maxCon)])
mdist <- dist(sub1[,c(10:12,maxCon)])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col=unclass(sub1$activity))
names(sub1[maxCon])
kClust <- kmeans(sub1, 6)
kClust
kClust < 1
kClust <- 1
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6)
table(kClust$cluster, sub1$activity)
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6)
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6, nstart = 100)
table(kClust$cluster, sub1$activity)
dim(kClust$centers)
laying <- which(kClust$size == 29)
plot(kClust$centers[laying, 1:12], pch = 19, ylab="Laying Cluster")
names(sub1[, 1:3])
walkdown <- which(kClust$size == 49)
plot(kClust$centers[laying, 1:12], pch = 19, ylab="Laying Cluster")
plot(kClust$centers[walkdown, 1:12], pch = 19, ylab="Laying Cluster")
plot(kClust$centers[walkdown, 1:12],pch=19,ylab="Walkdown Cluster")
install.packages("tidyverse")
library(tidyverse)
remove.packages(dplyr)
library(lubridate)
wday("2018-03-13")
setwd("~/DEV-PROJECT/My Project/RProjects/datasciencecoursera/Reproducible Research/Project 2")
fileName <- "StormData.csv.bz2"
data <- read.csv(fileName, header = TRUE, stringsAsFactors = FALSE)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
data <- read_csv(file = fileName, col_names = TRUE)
str(data)
head(data)
col_names <- c("EVTYPE", "FATALITIES", "INJURIES", "PROPDMG", "PROPDMGEXP", "CROPDMG", "CROPDMGEXP")
need_data <- data %>% select(col_names)
head(need_data)
unique(need_data$CROPDMGEXP)
unique(need_data$EVTYPE)
length(unique(need_data$EVTYPE))
table(unique(need_data$EVTYPE))
strsplit("Wind Damage", " ")
unlist(strsplit("Wind Damage", " "))
c <- unlist(strsplit("Wind Damage", " "))
"Wind" %in% c
# list valid event name drawed from the document
valid_event_name = c("Astronomical Low Tide",
"Avalanche",
"Blizzard",
"Coastal Flood",
"Cold/Wind Chill",
"Debris Flow",
"Dense Fog",
"Dense Smoke",
"Drought",
"Dust Devil",
"Dust Storm",
"Excessive Heat",
"Extreme Cold/Wind Chill",
"Flash Flood",
"Flood",
"Frost/Freeze",
"Funnel Cloud",
"Freezing Fog",
"Hail",
"Heat",
"Heavy Rain",
"Heavy Snow",
"High Surf",
"High Wind",
"Hurricane (Typhoon)",
"Ice Storm",
"Lake-Effect Snow",
"Lakeshore Flood",
"Lightning",
"Marine Hail",
"Marine High Wind",
"Marine Strong Wind",
"Marine Thunderstorm Wind",
"Rip Current",
"Seiche",
"Sleet",
"Storm Surge/Tide",
"Strong Wind",
"Thunderstorm Wind",
"Tornado",
"Tropical Depression",
"Tropical Storm",
"Tsunami",
"Volcanic Ash",
"Waterspout",
"Wildfire",
"Winter Storm",
"Winter Weather" )
# Define the funtion return the valid name of a event or NA
get_name <- function(name){
name <- tolower(name)
name <- sub("\\\\", " ", x) # eliminate \'s
name <- sub("-", " ", x) # eliminate -'s
name <- sub("/", " ", x) # eliminate /'s
name <- gsub("\\s+", " ", x) # compress multiple spaces
name <- trimws(x) # trim leading and trailing whitespace
for(sd in valid_event_name){
l1 <- unlist(strsplit(tolower(sd), " "))
l2 <- unlist(strsplit(name, " "))
for(s in l2){
if(s %in% l1){
return(sd)
}
}
}
NA
}
get_name("WIND/HAIL")
# list valid event name drawed from the document
valid_event_name = c("Astronomical Low Tide",
"Avalanche",
"Blizzard",
"Coastal Flood",
"Cold/Wind Chill",
"Debris Flow",
"Dense Fog",
"Dense Smoke",
"Drought",
"Dust Devil",
"Dust Storm",
"Excessive Heat",
"Extreme Cold/Wind Chill",
"Flash Flood",
"Flood",
"Frost/Freeze",
"Funnel Cloud",
"Freezing Fog",
"Hail",
"Heat",
"Heavy Rain",
"Heavy Snow",
"High Surf",
"High Wind",
"Hurricane (Typhoon)",
"Ice Storm",
"Lake-Effect Snow",
"Lakeshore Flood",
"Lightning",
"Marine Hail",
"Marine High Wind",
"Marine Strong Wind",
"Marine Thunderstorm Wind",
"Rip Current",
"Seiche",
"Sleet",
"Storm Surge/Tide",
"Strong Wind",
"Thunderstorm Wind",
"Tornado",
"Tropical Depression",
"Tropical Storm",
"Tsunami",
"Volcanic Ash",
"Waterspout",
"Wildfire",
"Winter Storm",
"Winter Weather" )
# Define the funtion return the valid name of a event or NA
get_name <- function(name){
name <- tolower(name)
name <- sub("\\\\", " ", name) # eliminate \'s
name <- sub("-", " ", name) # eliminate -'s
name <- sub("/", " ", name) # eliminate /'s
name <- gsub("\\s+", " ", name) # compress multiple spaces
name <- trimws(name) # trim leading and trailing whitespace
for(sd in valid_event_name){
l1 <- unlist(strsplit(tolower(sd), " "))
l2 <- unlist(strsplit(name, " "))
for(s in l2){
if(s %in% l1){
return(sd)
}
}
}
NA
}
get_name("WIND/HAIL")
get_name("THUNDERSTORM WINS")
valid_event_name = c("Tide",
"Avalanche",
"Blizzard",
"Flood",
"Chill",
"Debris Flow",
"Fog",
"Smoke",
"Drought",
"Dust",
"Heat",
"Frost/Freeze",
"Cloud",
"Hail",
"Rain",
"Snow",
"Surf",
"Wind",
"Hurricane",
"Ice",
"Lightning",
"Current",
"Seiche",
"Sleet",
"Surge",
"Thunderstorm",
"Tornado",
"Depression",
"Tsunami",
"Volcanic Ash",
"Waterspout",
"Wildfire",
"Storm",
"Winter" )
# Define the funtion return the valid name of a event or NA
get_name <- function(name){
name <- tolower(name)
name <- sub("\\\\", " ", name) # eliminate \'s
name <- sub("-", " ", name) # eliminate -'s
name <- sub("/", " ", name) # eliminate /'s
name <- gsub("\\s+", " ", name) # compress multiple spaces
name <- trimws(name) # trim leading and trailing whitespace
for(sd in valid_event_name){
l1 <- unlist(strsplit(tolower(sd), " "))
l2 <- unlist(strsplit(name, " "))
for(s in l2){
if(s %in% l1){
return(sd)
}
}
}
NA
}
get_name("THUNDERSTORM WINS")
get_name(" HEAVY RAIN/URBAN FLOOD")
get_name("Volcanic Ash")
get_name("WATERSPOUT")
get_name("WAa")
unique(sapply(data$EVTYPE, get_name))
need_data$EVTYPE <- sapply(need_data$EVTYPE, get_name)
need_data <- need_data %>% filter(!is.na(EVTYPE))
need_data
need_data$EVTYPE
unique(need_data$EVTYPE)
unique(need_data$PROPDMGEXP)
unique(need_data$CROPDMGEXP)
strtoi("2")
need_data$PROPDMGEXP <- sapply(need_data$PROPDMGEXP, get_expo)
get_expo <- function(x){
if(is.na(x)){
return(1)
}
x <- toupper(x)
if(x == "+" || x == "?" || x == "-"){
1
}else if(x == "K"){
3
}else if(x == "M"){
6
}else if(x == "B"){
9
}else if(x == "H"){
2
}else{
strtoi(x)
}
}
need_data$PROPDMGEXP <- sapply(need_data$PROPDMGEXP, get_expo)
need_data$CROPDMGEXP <- sapply(need_data$CROPDMGEXP, get_expo)
need_data
10 ^ 1
10 ^ 2
need_data <- need_data %>% mutate(PROPDMG.NEW = PROPDMG * 10^PROPDMGEXP, CROPDMG.NEW = CROPDMG * 10^CROPDMGEXP)
need_data
sum(need_data$CROPDMG.NEW > 0)
health_damage <- need_data %>% mutate(HEALTH.DAMAGE = FATALITIES + INJURIES)
health_damage <- health_damage %>% group_by(EVTYPE) %>% summarise(HEALTH.TOTAL.DAMAGE = sum(HEALTH.DAMAGE))
health_damage
ggplot(data=health_damage, aes(x=reorder(EVTYPE, HEALTH.TOTAL.DAMAGE), y=HEALTH.TOTAL.DAMAGE)) +
geom_bar(stat="identity") +
ggtitle(label = "Total Fatalities and injuries caused by each event") +
labs(x = "Event Type", y = "Count")
health_damage %>% order(HEALTH.TOTAL.DAMAGE, decreasing = TRUE)
head(health_damage[order(health_damage$HEALTH.TOTAL.DAMAGE, decreasing = TRUE), n = 5])
head(health_damage[order(health_damage$HEALTH.TOTAL.DAMAGE, decreasing = TRUE), ], n = 5)
health_damage <-head(health_damage[order(health_damage$HEALTH.TOTAL.DAMAGE, decreasing = TRUE), ], n = 5)
health_damage <- need_data %>% mutate(HEALTH.DAMAGE = FATALITIES + INJURIES)
health_damage <- health_damage %>% group_by(EVTYPE) %>% summarise(HEALTH.TOTAL.DAMAGE = sum(HEALTH.DAMAGE))
top_health_damage <-head(health_damage[order(health_damage$HEALTH.TOTAL.DAMAGE, decreasing = TRUE), ], n = 5)
ggplot(data=top_health_damage, aes(x=reorder(EVTYPE, HEALTH.TOTAL.DAMAGE), y=HEALTH.TOTAL.DAMAGE)) +
geom_bar(stat="identity") +
ggtitle(label = "Top 5 Weather Events with the Highest Total Fatalities and Injuries") +
labs(x = "Event Type", y = "Count")
ggplot(data=top_health_damage, aes(x=EVTYPE, y=HEALTH.TOTAL.DAMAGE)) +
geom_bar(stat="identity") +
ggtitle(label = "Top 5 Weather Events with the Highest Total Fatalities and Injuries") +
labs(x = "Event Type", y = "Count")
eco_damage <- need_data %>% mutate(ECO.DAMAGE = CROPDMG.NEW + CROPDMG.NEW)
eco_damage <- eco_damage %>% group_by(EVTYPE) %>% summarise(ECO.TOTAL.DAMAGE = sum(ECO.DAMAGE))
# get 5 top event with the Highest Total damage on property and crop
top_eco_damage <-head(eco_damage[order(eco_damage$ECO.TOTAL.DAMAGE, decreasing = TRUE), ], n = 5)
#plot
ggplot(data=top_eco_damage, aes(x=EVTYPE, y=ECO.TOTAL.DAMAGE)) +
geom_bar(stat="identity") +
ggtitle(label = "Top 5 Weather Events with the Highest Total damage") +
labs(x = "Event Type", y = "Amount ($)")
