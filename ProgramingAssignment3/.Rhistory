15:1
`:`
?`:`
seq(1,20)
seq(0,10,by = 0.5)
my_seq <- seq(5,10,length = 30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each = 10)
swirl()
num_vect <- c(0.5,55,-10,6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Vy")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep=" ")
paste(1:3, c("X,"Y,"Z"), sep="")
paste(c(1,2,3), c("X,"Y, "Z"), sep="")
?paste
paste(1:3, c("X","Y","Z"), sep="")
paste(LETTERS,1:4, sep="-")
swirl()
x <- c(44,NA,5,NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, length = 1000)
z <- rep(NA,1000)
my_data <-sample(c(y,z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0 / 0
Inf - Inf
swirl()
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo = 11, bar = 2, norf=NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
swirl()
my_vector < 1:20
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20, nrow=4, ncol=5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
swirl()
x <- 1
f <- function() x
g <- function() { x <- 0; f() }
g() # 1
f <- function() eval.parent(quote(x))
g() # 0
y <- 10
f <- function(x) {
y <- 2
y^2 + g(x)
}
g <- function(x) {
x*y
}
f(3)
y <- 10
f <- function(x) {
y <- 2
y^2 + g(x)
}
y <- 10
f <- function(x) {
y <- 2
g <- function(x) {
x*y
}
y^2 + g(x)
}
f(3)
swirl()
library(swirl)
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4>3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
Sys.Date()
mean(c(2,4,5))
submit()
boring_function("My first function!")
boring_function
submit()
submit()
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div=2)
args(remainder)
submit()
evaluate(sd, c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]},c(8,4,0))
evaluate(function(x){x[length(x)]},c(8,4,0))
?paste
paste("Programming", "is", "fun")
paste("Programming", "is", "fun!")
telegram <- function(...){
paste("START", ..., "STOP")
}
telegram("hi")
submit()
telegram("hi")
mad_libs <- function(...){
# Do your argument unpacking here!
# Don't modify any code below this comment.
# Notice the variables you'll need to create in order for the code below to
# be functional!
args <- list(...)
place <- args[["place"]]
adjective <- args[["adjective"]]
noun <- args[["noun"]]
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
submit()
mad_libs(noun = "me", adjective = "b", place = "a")
submit()
"%p%" <- function(x, y){ # Remember to add arguments!
paste(x,y)
}
"Hello" %p% "x"
"Good" %p% "job!"
submit()
"Good" %p% "job!"
submit()
'I' %p% 'love' %p% 'jon!'
'I' %p% 'love' %p% 'job!'
'I' %p% 'love' %p% 'R!'
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4, 5, 10))
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]},c(8,4,0))
evaluate(function(x){x[length(x)]},c(8,4,0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("hi")
submit()
mad_libs(noun = "me", adjective = "b", place = "a")
submit()
'I' %p% 'love' %p% 'R!'
swirl()
swirl()
d1 <- Sys.Date()
class(d1)
unclass(d1)
print(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
Sys.time()
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
t2
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
strptime("October 17, 1986 08:24",format = "%B %d, %Y %H:%M")
t3 <- "October 17, 1986 08:24"
strptime(t3 ,format = "%B %d, %Y %H:%M")
strptime(t3 ,"%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
swirl()
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
swirl()
swirl()
clear
library(iris)
library(datasets)
data(iris)
?iris
head(iris)
class(iris)
colMeans(iris)
colMeans(iris$Sepal.Length)
colMeans(iris[,1:2])
lapply(iris, mean)
apply(iris[,1:4], 1, mean)
apply(iris[,1:4], 2, mean)
library(datasets)
data(mtcars)
?mtcars
head(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
with(mtcars, tapply(mpg, cyl, mean))
mean(mtcars$mpg, mtcars$cyl)
sapply(mtcars, cyl, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
s <- tapply(mtcars$hp, mtcars$cyl, mean)
s
s["4"]
s["4"] - s["8"]
abs(s["4"] - s["8"])
debug(ls)
ls()
n
exit()
Q
?iris
colMeans(iris$Sepal.Length)
colMeans(iris)
colMeans(iris$Sepal.Length)
colMeans(iris[,1:2])
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
?mtacrs
?mtcars
s <- tapply(mtcars$hp, mtcars$cyl, mean)
abs(s["4"] - s["8"])
ass
library(datasets)
data(iris)
head(iris)
tapply(ir)
tapply(iris$Sepal.Length, iris$Species, mean)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
s <- tapply(mtcars$hp, mtcars$cyl, mean)
abs(s["4"] - s["8"])
source('~/DEV-PROJECT/My Project/RProjects/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
m <- matrix(c(1,0,5,2,1,6,3,4,0), nrow = 3, ncol = 3)
m
makeCacheMatrix(m)
makeMat <- makeCacheMatrix(m)
cacheSolve(m)
cacheSolve(makeMat)
cacheSolve(makeMat)
cacheSolve(makeMat)
cacheSolve(makeMat)
m <- matrix(c(4,3,3,2), nrow = 2, ncol = 2)
makeMat <- makeCacheMatrix(m)
cacheSolve(makeMat)
cacheSolve(makeMat)
source('~/DEV-PROJECT/My Project/RProjects/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
m <- matrix(c(4,3,3,2), nrow = 2, ncol = 2)
makeMat <- makeCacheMatrix(m)
cacheSolve(makeMat)
cacheSolve(makeMat)
?system.time
?system.time()
set.seed(1)
rpois(5,2)
library(datasets)
RProf()
Rprof()
fit <- lm(x ~ x1 + x2)
?Rprof
library(swirl)
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plant)
names(plants)
head(plants)
head(plants, 10)
tail(plants)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips[flips > 0])
sum(flips)
?rbinom
rbinom(1, size=100, prob=0.7)
flips2 <- rbinom(100, size=1, prob=0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, mean = 100, sd = 25)
?rpois
rpois(5, 10)
my_pois <- replicate(100, rpois(5,10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
swirl()
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x=cars$speed, y=cars$dist)
plot(x=cars$dist, y =cars$speed)
plot(x=cars$speed, y=cars$dist)
plot(x=cars$speed, y=cars$dist, xlab = "Speed")
plot(x=cars$speed, y=cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x=cars$speed, y=cars$dist, ylab = "Stopping Distance")
plot(x=cars$speed, y=cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x=cars$speed, y=cars$dist, main = "My Plot")
plot(cars, main = "My Plot")
plot(cars, sub="My Plot Subtitle")
?plot
plot(cars, col=2)
plot(cars, xlim=c(10,15))
plot(cars, pch= 2)
data("mtcars")
data(mtcars)
?boxplot
boxplot(mpg ~ cyl, mtcars)
hist(mtcars$mpg)
swirl()
swirl()
sort(c(3,5,1,2,4))
sort(c(3,5,1,2,4,11))
source('~/DEV-PROJECT/My Project/RProjects/datasciencecoursera/ProgramingAssignment3/rankall.R')
head(rankall("heart attack", 20), 10)
setwd("~/DEV-PROJECT/My Project/RProjects/datasciencecoursera/ProgramingAssignment3")
source('~/DEV-PROJECT/My Project/RProjects/datasciencecoursera/ProgramingAssignment3/rankall.R')
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
source('~/DEV-PROJECT/My Project/RProjects/datasciencecoursera/ProgramingAssignment3/rankhospital.R')
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
source('~/DEV-PROJECT/My Project/RProjects/datasciencecoursera/ProgramingAssignment3/best.R')
best("TX", "heart attack")
best("TX", "heart failure")
source('~/DEV-PROJECT/My Project/RProjects/datasciencecoursera/ProgramingAssignment3/best.R')
best("SC", "heart attack")
best("NY", "pneumonia")
best("AK", "pneumonia")
source('~/DEV-PROJECT/My Project/RProjects/datasciencecoursera/ProgramingAssignment3/rankhospital.R')
rankhospital("NC", "heart attack", "worst")
rankhospital("WA", "heart attack", 7)
rankhospital("TX", "pneumonia", 10)
rankhospital("NY", "heart attack", 7)
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
source('~/DEV-PROJECT/My Project/RProjects/datasciencecoursera/ProgramingAssignment3/rankall.R')
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r <- rankall("pneumonia", "worst")
as.character(subset(r, state == "NJ")$hospital)
r <- rankall("heart failure", 10)
as.character(subset(r, state == "NV")$hospital)
